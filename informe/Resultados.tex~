\section{Resultados}


En esta secci\'on se presentan los resultados obtenidos en las diferentes combinaciones de m\'etodos de resoluci\'on y cortes utilizados. Dichas combinaciones fueron

\begin{itemize}
\item Branch-and-Bound por defecto de CPLEX. (B\&B)
\item Cut-and-Branch con cortes Cover. (C\&B-Cov)
\item Cut-and-Branch con cortes Clique. (C\&B-Cli)
\item Cut-and-Branch con ambos cortes. (C\&B-CC)
\item Branch-and-Cut con cortes Cover. (B\&C-Cov)
\item Branch-and-Cut con cortes Clique. (B\&C-Cli)
\item Branch-and-Cut con ambos cortes. (B\&C-CC)
\end{itemize}

Para cada una de estas instancias se resolvi\'o reportar y analizar los tiempos de ejecuci\'on, que suele ser la medida m\'as importante a la hora de analizar este tipo de algoritmos; la cantidad de nodos explorados y la calidad de la cota dual conseguida en el nodo ra\'iz.


La idea original del trabajo era realizar las corridas pertinentes sobre instancias de la MIPLIB, pero dado el tama\~no de las instancias se decidi\'o generar instancias propias con tama\~nos manejables por los algoritmos utilizados, con el objetivo de poder visualizar en un tiempo razonable las diferencias entre las diferentes opciones.

Todas las corridas se realizaron sobre una CPU INTEL CORE 2 DUO 2.8 GHZ 2GB RAM, utilizando la versi\'on 12.4 de CPLEX.


En la siguiente tabla se muestra la informaci\'on de las instancias utilizadas, mostrando la cantidad de columnas del problema, la cantidad de filas, la cantidad de desigualdades que ya son cover (dado que por como estan generadas las instancias todas son desigualdades mochila); y por \'ultimo se encuentra la cantidad de ejes presentes en el grafo de conflicto utilizado para las desigualdades clique.


\begin{table}[H]
\begin{tabular}{||c|c|c|c|c|c||}
\hline
\backslashbox{Instancia}{M\'etodo} & CantCol & CantFil & Cover & Ejes Grafo Conflicto\\
\hline
Inst1 & 23 & 14 & 3 & 126\\
\hline
Inst2 & 50 & 20 & 0 & 290\\
\hline
Inst3 & 102 & 49 & 4 & 626\\
\hline
Inst4 & 255 & 124 & 12 & 1554\\
\hline
Inst5 & 342 & 165 & 12 & 2062\\
\hline
Inst6 & 359 & 171 & 17 & 2236\\
\hline
Inst7 & 407 & 197 & 18 & 2496\\
\hline
Inst8 & 450 & 212 & 16 & 2716\\
\hline
Inst9 & 484 & 236 & 19 & 2852\\
\hline
Inst10 & 550 & 256 & 14 & 3334\\
\hline
Inst11 & 637 & 308 & 26 & 3822\\
\hline
Inst12 & 1497 & 717 & 59 & 9104\\
\hline
\end{tabular}
\caption{Informaci\'on de las instancias}
\end{table}





\newpage
A continuaci\'on, se presentan los tiempos de ejecuci\'on para cada una de las instancias en cada una de las combinaciones mencionadas. Para cada corrida se fij\'o un tiempo l\'imite de 20 minutos. En el caso de que se alcance el tiempo m\'aximo establecido, lo que se reporta es el gap alcanzando.




\begin{table}[H]
\begin{tabular}{||c|c|c|c|c|c|c|c||}
\hline
\backslashbox{Ins}{M\'et} & B\&B & C\&B-Cov & C\&B-Cli & C\&B-CC & B\&C-Cov & B\&C-Cli & B\&C-CC\\
\hline
Inst1 &  0.028 & 0.02 & 0.01 & 0.02 & 0.02 & 0.02 & 0.03 \\
\hline
Inst2 &  0.35 & 0.04 & 0.03 & 0.03 & 0.04 & 0.04 & 0.03 \\
\hline
Inst3 &  439.36 & 0.07 & 22.34 & 0.06 & 0.07 & 0.78 & 0.07  \\
\hline
Inst4 &  (34.30\%) & 5.22 & (10.40\%) & 0.61 & 1.66 & (8.26\%) & 0.67  \\
\hline
Inst5 &  (49.52\%) & 62.92 & (32.17\%) & 5.54 & 40.85 & (25.20\%) & 7.18  \\
\hline
Inst6 &  (39.19\%) & 21.41 & (24.47\%) & 1.04 & 6.16 & (16.02\%) & 1.01 \\
\hline
Inst7 &  (45.05\%) & 253.80 & (27.39\%) & 19.56 & 207.82 & (19.51\%) & 55.54 \\
\hline
Inst8 &  (46.75\%) & 1013.47 & (35.44\%) & 151.50 & 824.36 & (23.35\%) & 313.26  \\
\hline
Inst9 &  (49.42\%) & 123.65 & (35.69\%) & 13.14 & 8.16 & (21.34\%) & 4.51  \\
\hline
Inst10 & (50.12\%) & 1175.68 & (30.95\%) & 16.73 & 297.48 & (22.90\%) & 72.96 \\
\hline
Inst11 & (49.78\%) & 626.17 & (31.50\%) & 9.29 & 235.80 & (19.64\%) & 15.00  \\
\hline
Inst12 & (64.27\%) & (5.55\%) & (45.55\%) & (2.77\%) & (4.12\%) & (28.67\%) & (1.87\%)  \\
\hline
\end{tabular}
\caption{Tiempos de ejecuci\'on}
\end{table}


De la anterior tabla, hay varios resultados interesantes a analizar.

En primer lugar es claro que el Branch-and-Bound solo es la peor de las combinaciones, siendo este un resultado esperado de antemano.


Luego se observa que la inclusi\'on de las desigualdades clique es beneficiosa para el algoritmo, ya que los gaps conseguidos son sustancialmente m\'as bajos que los conseguidos solo con el Branch-and-Bound, tambi\'en se observa que hay una notoria diferencia entre la inclusi\'on de los cortes solo en el nodo ra\'iz y en todos los nodos del algoritmo, de hecho la reducci\'on del gap entre estos dos casos es cas\'i tan grande como la reducci\'on del gap entre el primer caso y el branch-and-bound en la mayor\'ia de los casos. Sin embargo, se nota que la sola inclusi\'on de este corte no logra resolver casi ninguna instancia de las presentadas. 



Por otro lado, observando los cortes cover, se puede visualizar un gran incremento en la calidad del algoritmo en cuanto al tiempo de ejecuci\'on se refiere. La sola inclusi\'on de las desigualdades cover en el nodo ra\'iz ya hace que la mayor\'ia de las instancias sean resueltas en el tiempo fijado. Nuevamente, al igual que en las desigualdad Clique, se puede observar que el m\'etodo de Branch-and-Cut es notoriamente superior a incluir cortes solo en el primer nodo.



Luego, se observan los mejores resultados cuando se combinan los dos cortes propuestos. Incluir los dos cortes propuestos resulta en mejoras considerables del tiempo de ejecuci\'on en todas las instancias presentadas y por grandes m\'argenes. Un resultado interesante cuando se combinan los cortes es que en casi todas las instancias ahora la mejor combinaci\'on resulta a ser el Cut-and-Branch en vez del Branch-and-Cut, es decir que resulta m\'as conveniente fortalecer el nodo ra\'iz y luego lanzar un Branch-and-Bound sobre el problema fortalecido, que ir buscando cortes en todos los nodos del arbol recorrido.

Una posible explicaci\'on para esto proviene del hecho de que cuando solo se tienen en cuenta dos variables, una desigualdad clique es tambi\'en una desigualdad cover y por lo tanto se utiliza mucho tiempo ejecutando los algoritmos de separaci\'on en cada uno de los nodos, muchas veces encontrando la misma desigualdad violada.


\newpage
A continuaci\'on se observan la cantidad de nodos procesados por cada m\'etodo en cada instancia.



\begin{table}[H]
% \begin{center}
\begin{tabular}{||c|c|c|c|c|c|c|c||}
\hline
\backslashbox{Instancia}{M\'etodo} & B\&B & C\&B-Cov & C\&B-Cli & C\&B-CC & B\&C-Cov & B\&C-Cli & B\&C-CC\\
\hline
Inst1 & 121 & 9 & 26 & 9 & 11 & 26 & 11\\
\hline
 Inst2 & 1713 & 21 & 64 & 5 & 10 & 52 & 5\\
\hline
 Inst3 & 1784716 & 21 & 79305 & 13 & 11 & 943 & 7\\
\hline
 Inst4 & 2597655 & 7338 & 2614682 & 399 & 1275 & 456508 & 116\\
\hline
 Inst5 & 2218211 & 83018 & 2198464 & 6541 & 29007 & 342221 & 1716\\
\hline
 Inst6 & 2133152 & 24488 & 2123171 & 549 & 3781 & 318212 & 85\\
\hline
 Inst7 & 1970321 & 292520 & 1949330 & 20163 & 127452 & 281831 & 11483\\
\hline
 Inst8 & 1823566 & 1035270 & 1795256 & 159417 & 457015 & 259647 & 58220\\
\hline
 Inst9 & 1700896 & 121732 & 1721985 & 12070 & 3722 & 240533 & 648\\
\hline
 Inst10 & 1507069 & 1025320 & 1572922 & 11010 & 132581 & 204558 & 11557\\
\hline
 Inst11 & 1349057 & 493905 & 1435534 & 5587 & 94046 & 177712 & 1937\\
\hline
Inst12 & 628987 & 519323 & 649291 & 547822 & 222469 & 72630 & 62321\\
\hline



\end{tabular}
\caption{Cantidad de nodos}
% \end{center}
\end{table}


Al igual que en los tiempos de ejecuci\'on, la anterior tabla muestra tendencias marcadas que se condicen en todas las instancias.

En primer lugar se nota que este caso la cantidad de nodos que procesan el Branch-and-Bound y la versi\'on clique en Cut-and-Branch est\'an en el mismo orden, esto se debe a que en el segundo caso solo se est\'a poniendo un poco m\'as de esfuerzo en el nodo ra\'iz pero no alcanza para resolver las instancias en los tiempos dados por lo que en ambos casos se est\'a cortado la ejecuci\'on por tiempo l\'imite y ambas combinaciones terminan procesando una cantidad similar de nodos.

Luego, se puede ver que si bien el Branch-and-Cut con cortes clique tambi\'en cortaba por tiempo, se observa que, logicamente, la cantidad de nodos procesados en este es bastante menor, porque se est\'a poniendo m\'as esfuerzo computacional en cada nodo para encontrar mejores cortes que eviten menos \emph{brancheo} del arbol de resoluci\'on.



Nuevamente las desigualdades cover por si solas ya son una muy buena mejora a la opci\'on sin cortes, ya solo en Cut-and-Branch se puede observar como casi todas las instancias se resuelven hasta la optimalidad explorando una cantidad de nodos muchisimo menor a las combinaciones analizadas recientemente. Al igual que en las desigualdad clique, se puede observar que la cantidad de nodos necesitados por el Branch-and-Cut para llegar hasta la optimalidad es mucho menor a solamente fortalecer la formulaci\'on en el nodo ra\'iz.


Por \'ultimo, se observa nuevamente como la combinaci\'on de las dos familias de cortes muestran una mejor\'ia notable. La cantidad de nodos procesados por las combinaciones de los cortes esta en menos del 10\% de los nodos utilizados por el resto de los casos en la mayor\'ia de las instancias, excepto por las instancias muy peque\~nas que se resuelven casi instantaneamente.

Si bien en la tabla anterior se pudo apreciar que la mejor combinaci\'on en cuanto a tiempos de ejecuci\'on resulto ser el Cut-and-Branch con las dos familias de cortes, es l\'ogico que ahora esa tendencia sea la inversa en cuanto a la cantidad de nodos se refiere. La cantidad de nodos explorados por el algoritmo de Branch-and-Cut es casi siempre menor a los explorados por el Cut-and-Branch. Nuevamente esta tendencia se explica por el esfuerzo realizado en cada nodo para obtener mejores cotas duales.

\bigskip


A continuaci\'on, se presentan las cotas duales que se cuentan al salir del nodo ra\'iz en cada instancia para cada una de las combinaciones procesadas.

Dado que solo se realiza el estudio de cortes sobre el nodo ra\'iz, no tiene sentido hacer la distinci\'on entre Cut-and-Branch y Branch-and-Cut



\begin{table}[H]
% \begin{center}
\begin{tabular}{||c|c|c|c|c|c|c|c||}
\hline
\backslashbox{Instancia}{M\'etodo} & B\&B & Cov & Cli & CC\\
\hline
Inst1 & 63.102984 & 50.718318  & 57.290728 & 50.718318 \\
\hline
Inst2 & 131.694127 & 96.169751  & 105.196265 & 91.543583 \\
\hline
Inst3 & 241.328893 & 177.003756  & 233.579693 & 176.221233 \\
\hline
Inst4 & 657.440072 & 475.573907  & 636.544978 & 468.910325 \\
\hline
Inst5 & 941.943356 & 632.583498  & 920.353932 & 626.323623 \\
\hline
Inst6 & 909.175963 & 655.330574  & 883.845455 & 644.841459 \\
\hline
Inst7 & 1111.512719 & 789.187803  & 1089.283174 & 778.825366 \\
\hline
Inst8 & 1111.091109 & 799.345685  & 1074.689065 & 793.736217 \\
\hline
Inst9 & 1337.292364 & 923.283656  & 1321.944489 & 916.926981 \\
\hline
Inst10 & 1461.620012 & 1027.316771  & 1416.152038 & 1012.057732 \\
\hline 
Inst11 & 1689.316530 & 1190.200534  & 1654.273710 & 1185.898751 \\
\hline
Inst12 & 4016.096160 & 2793.529570  & 3911.505935 & 2748.371351  \\
\hline
\end{tabular}
\caption{Relajaci\'on inicial}
% \end{center}
\end{table}


Dado que las instancias utilizadas son todas problemas de optimizaci\'on, lo deseable ser\'ia obtener valores lo m\'as peque\~nos posibles para las cotas duales.

En esta tabla la tendencia que se ven\'ia dando con los anteriores resultados es irrefutable, en absolutamente todas las instancias se puede ver que el Branch-and-Bound obtiene las peores cotas duales, lo cual es l\'ogico porque todos los dem\'as m\'etodos comienzan con esta soluci\'on como punto de partida. 

Luego se encuentra la inclusi\'on de las desigualdades clique que en todas las instancias mejora las cotas del Branch-and-Bound, pero los resultados obtenidos se encuentran en el mismo orden de magnitud.

Ya si con una diferencia notoria se encuentra la utilizaci\'on de la desigualdades cover, que en los casos m\'as interesantes logran cotas que est\'an en el orden de los dos tercios de las conseguidas por las desigualdades clique.

Por \'ultimo, la mejor columna en todos los casos es la perteneciente a la combinaci\'on de las dos familias, reforzando una vez m\'as el hecho de que es importante la inclusi\'on de este tipo de cortes generales. Si bien esta es la mejor columna de las 4, cabe notar que no muestra mucha diferencia con los resultados arrojados por las desigualdades cover.


\bigskip


Como an\'alisis general, se observa que la inclusi\'on de las dos familias de cortes generales resulto beneficioso en todos los aspectos presentados, mostrando grandes diferencias con el m\'etodo que se contaba originalmente, el Branch-and-Bound.
